(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[740],{3492:function(e,t,n){"use strict";n.r(t),n.d(t,{Head:function(){return p},default:function(){return u}});var a=n(1151),o=n(7294);function r(e){const t=Object.assign({p:"p",em:"em",a:"a",strong:"strong",img:"img",pre:"pre",code:"code"},(0,a.ah)(),e.components);return o.createElement(o.Fragment,null,o.createElement(t.p,null,o.createElement(t.em,null,"I recently dived into Elixir and found out how fun and easy to understand the language is. I want to learn its framework Phoenix by building a full stack travel blog application. I use this project to learn Phoenix contexts and authentication. Lets go!")),"\n",o.createElement("br"),"\n",o.createElement("p",{align:"center"},"* * * *"),"\n",o.createElement("br"),"\n",o.createElement(t.p,null,"Here is what we are going to do in the first part of this project:"),"\n",o.createElement("ol",null,o.createElement("li",null,"1. Set up a new Phoenix project"),"\n",o.createElement("li",null,"2. Generate an Accounts context"),"\n",o.createElement("li",null,"3. Generate an Blog context with a Post model"),"\n",o.createElement("li",null,"4. Generate a Comment model inside the Blog context"),"\n",o.createElement("li",null,"5. Create a comments controller"),"\n",o.createElement("li",null,"6. Create a comments form, load and display comments")),"\n",o.createElement(t.p,null,"All the completed code for this project can be found on this ",o.createElement("span",{style:{color:"blue"}}," ",o.createElement(t.a,{href:"https://github.com/rowah/travel_blog"},"repository"))," . Clone and switch to the comment_feature branch for the code. The main branch has authentication implemented."),"\n",o.createElement("br"),"\n",o.createElement(t.p,null,"To get started, we will open the terminal and change directory to wherever you want\nto create your project. Once there, run ",o.createElement(t.strong,null,o.createElement(t.em,null,"mix phx.new travel_blog"))," command to\ncreate a new Phoenix project called travel_blog."),"\n",o.createElement("br"),"\n",o.createElement(t.img,{src:"/images/travel_blog.png",alt:"Hopper The Rabbit"}),"\n",o.createElement("br"),"\n",o.createElement(t.p,null,"Once created and all the dependencies installed, let us cd into the travel_blog directory and open it on your text editor."),"\n",o.createElement("br"),"\n",o.createElement("div",{style:{backgroundColor:"grey",height:"100px",paddingTop:"30px",paddingLeft:"10px",margin:"20px"}},o.createElement("ul",null,o.createElement("li",null,"$ cd travel_blog"),"\n",o.createElement("li",null,"$ code ."))),"\n",o.createElement("br"),"\n",o.createElement(t.p,null,"Then configure your database in config/dev.exs and then to create the db, run:"),"\n",o.createElement("div",{style:{backgroundColor:"grey",height:"100px",paddingTop:"30px",paddingLeft:"10px",margin:"20px"}},o.createElement("p",null,"$ mix ecto.create")),"\n",o.createElement(t.p,null,"Then start the Phoenix app with;"),"\n",o.createElement("div",{style:{backgroundColor:"grey",height:"100px",paddingTop:"30px",paddingLeft:"10px",margin:"20px"}},o.createElement("p",null,"$ mix phx.server")),"\n",o.createElement("br"),"\n",o.createElement(t.p,null,'Open the application in the browser and see the default "Welcome to Phoenix" page.\nAwesome!'),"\n",o.createElement("br"),"\n",o.createElement(t.p,null,"Let us create our first context. Think of a context as a boundary to decouple and isolate parts of your application. They encapsulate data access and data validation in Phoenix applications.\nThe first context we will create is the Accounts context. To do so, run;"),"\n",o.createElement("div",{style:{backgroundColor:"grey",height:"100px",paddingTop:"30px",paddingLeft:"10px",margin:"20px"}},o.createElement("p",null,o.createElement(t.p,null,"$ mix phx.gen.context Accounts User users first_name:string last_name:string\nemail:string password_hash:string"))),"\n",o.createElement(t.p,null,"You should see:"),"\n",o.createElement(t.img,{src:"/images/account_context.png",alt:"Create context"}),"\n",o.createElement("br"),"\n",o.createElement(t.p,null,'So here we are creating an Accounts context with a "User" schema and the data table name being "users" with ',o.createElement(t.em,null,"first_name"),", ",o.createElement(t.em,null,"last_name"),", ",o.createElement(t.em,null,"email"),", and ",o.createElement(t.em,null,"password_hash"),". This generates files like User.ex which is a schema with users tables, accounts.ex which severs as the API boundary and a bunch of other test files."),"\n",o.createElement("br"),"\n",o.createElement(t.p,null,"Next we need a Post schema. To generate this, we will need to create a Blog context,\nthat will have the posts and comments. I choose to have the two under one context\nsince they will have a connection. We'll use ",o.createElement(t.strong,null,o.createElement(t.em,null,"mix phx.gen.html"))," which creates\na context module that wraps up Ecto access for creating, updating, and deleting products,\nalong with controllers and template web files (views) for the web interface into\nour context. We will give our posts a title (string), and a body (text). Run:"),"\n",o.createElement("div",{style:{backgroundColor:"grey",height:"100px",paddingTop:"30px",paddingLeft:"10px",margin:"20px"}},o.createElement("p",null,"$ mix phx.gen.html Blog Post posts title:string body:text")),"\n",o.createElement(t.img,{src:"/images/post_schema.png",alt:"Modifies post schemas"}),"\n",o.createElement("br"),"\n",o.createElement(t.p,null,'A look into the post.ex shows that it is the post schema that maps to the corresponding\ndb table named posts. There is also the post_controller.ex which is where we will\ninteract with the posts and their associated comments, but through the Blog context\nmodule which contains the "blog" functionality. For example, we use the ',o.createElement(t.strong,null,o.createElement(t.em,null,"Blog.list_posts")),"\nto get all the posts, we pass in the post id into the ",o.createElement(t.strong,null,o.createElement(t.em,null,"Blog.get_post"))," to get\na particular post, and we can create a post using the ",o.createElement(t.strong,null,o.createElement(t.em,null,"Blog.create_post"))," function.\nWhen we open the Blog context module we can see all the functions that are called\nin the post_controller.ex such as ",o.createElement(t.em,null,"list_posts")," which looks up and lists all our posts\nfrom the db, ",o.createElement(t.em,null,"create_post"),", ",o.createElement(t.em,null,"get_post")," which retrieved a single post whose id is\npassed and son on."),"\n",o.createElement("br"),"\n",o.createElement(t.p,null,"Then, we need to add the new resource ",o.createElement(t.em,null,'resources "/posts", PostController')," into the\nrouter.ex file."),"\n",o.createElement("br"),"\n",o.createElement(t.img,{src:"/images/post_resource.png",alt:"post resource"}),"\n",o.createElement("br"),"\n",o.createElement(t.p,null,"We can now run our migrations once again and start our server again using ",o.createElement(t.strong,null,o.createElement(t.em,null,"mix\nphx.server")),". We can then navigate to the /posts route and create a new post."),"\n",o.createElement("br"),"\n",o.createElement(t.p,null,"We can now dive into the more challenging part of our project. We want to create\nthe comments. We are going to include the comments functionality inside the already\nexisting blog context since the two are going to be related. To avoid complication,\nwe use the same post templates we generated through ",o.createElement(t.strong,null,o.createElement(t.em,null,"mix phx.gen.html"))," which\nwe used to create the blog context. We are not going to need any web files for the\ncomments so we can go ahead and use the ",o.createElement(t.strong,null,o.createElement(t.em,null,"mix phx.gen.context")),' generator with\nBlog as the context and Comment as the schema and comments for the table name. Additionally,\nour comments need to have a body, and an association with a post and so we will add\na "post_id" that will reference the post that each comment will be associated with.\nSo run;'),"\n",o.createElement("div",{style:{backgroundColor:"grey",height:"100px",paddingTop:"30px",paddingLeft:"10px",margin:"20px"}},o.createElement("p",null,o.createElement(t.p,null,"$ mix phx.gen.context Blog Comment comments body:string\npost_id:references:posts"))),"\n",o.createElement(t.p,null,"Upon running the generator, Phoenix asks if we are sure about creating the schema inside the Blog context and not in one of its own. This is okay in our case since the comments are associated with the Blog, and if we remember we created the Accounts context on its own. When we run the generator, we can see a new comment schema module created along with the associated comments migration. A look into the blog.ex we see some comments functions injected which are going to interact with the comments."),"\n",o.createElement("br"),"\n",o.createElement(t.p,null,'After defining the relationship between our posts and comments, we need to "link"\nthis relationship by doing some modifications in their schemas. We need to open the\ncomment.ex schema module and add the belongs_to association to the schema.'),"\n",o.createElement("br"),"\n",o.createElement(t.img,{src:"/images/comment_asocc.png",alt:"Associate with posts"}),"\n",o.createElement("br"),"\n",o.createElement(t.p,null,"We also need to open the post.ex schema module and add the has_many association with\nthe comments."),"\n",o.createElement("br"),"\n",o.createElement(t.img,{src:"/images/assoc_post.png",alt:"Associate with comments"}),"\n",o.createElement("br"),"\n",o.createElement(t.p,null,"After associating the comments with the posts, we need to ensure that when a post will be deleted, all the comments associated with it will also have to be deleted along with it. To do this, let us go to the migrations that were generated."),"\n",o.createElement("br"),"\n",o.createElement(t.img,{src:"/images/delete_all.png",alt:"Deletes comments"}),"\n",o.createElement(t.p,null,"We can then run our migrations;"),"\n",o.createElement("br"),"\n",o.createElement(t.img,{src:"/images/comments_mig.png",alt:"Migrates comments"}),"\n",o.createElement("br"),"\n",o.createElement(t.p,null,"Going back into the blog.ex context module inside of which our comment functions were also created, we notice that the patterns of both create_post and create_comment functions are the same, while the latter will have to take in the post with which the comment it creates will be associated. Therefore, we need to modify the create_comment function to accept the post that we want to associate the comment with."),"\n",o.createElement(t.img,{src:"/images/update_createcommentfn.png",alt:"Create comments"}),"\n",o.createElement("br"),"\n",o.createElement(t.p,null,"Remember that when we created the Comment schema module inside the Blog context,\nwe did not generate any of the web files. Therefore, we will need to create our own\ncontroller for the comments and later on update the post view to accommodate the\ncreation and display of the comments."),"\n",o.createElement(t.p,null,"Inside the controllers directory, let us create\na new module comment_controller.ex inside of which we will define our module, and\ngive it a single create function that accepts the connection. We need to pattern\nmatching on the params to get the id of the post, and the comment params (sent over\nfrom the comment form after submission)."),"\n",o.createElement("br"),"\n",o.createElement(t.img,{src:"/images/comnt_cntrl.png",alt:"comment control"}),"\n",o.createElement("br"),"\n",o.createElement(t.p,null,"To get the post that the incoming comment is associated with, we will call the Blog.get_post\nfunction which will take in the post id coming with the comment, and then create\nour comment using a case statement in the Blog.create_comment function that we had\nalready associated with the post. We will then need to pattern match the OK tuple\nthat will be returned if the comment is created successfully and the error tuple\nreturned if the creation fails. If the comment is created, we display a flash message\nindicating so and redirecting the user to the post path, and if it fails, we will\nalso display an error message and return them to the post path."),"\n",o.createElement(t.p,null,"We will then need to go to the router.ex and nest the new CommentController inside the “posts” resource, only specifying the “create” action which is what we set in the controller."),"\n",o.createElement("br"),"\n",o.createElement(t.img,{src:"/images/commentrcs.png",alt:"Comment"}),"\n",o.createElement("br"),"\n",o.createElement(t.p,null,"We will the need to add our comments form inside the post's show.htm.eex template\njust below the post by defining a new from_for with a @comment_changeset that we\nwill create. We are then posting the form to the new comments path we just created"),"\n",o.createElement("br"),"\n",o.createElement(t.img,{src:"/images/comments_form.png",alt:"comment form"}),"\n",o.createElement("br"),"\n",o.createElement(t.p,null,"We then need to create the comment_changeset in the show function inside the post_controller.ex.\nCalling the Blog.change_comment gets us our comment changeset, which we then pass\ninto the assigns as comment_changeset. We then have to alias Comment so we can use\nit here without the prefix."),"\n",o.createElement("br"),"\n",o.createElement(t.img,{src:"/images/cmnt_cs.png",alt:"comments changeset"}),"\n",o.createElement("br"),"\n",o.createElement(t.p,null,"We can then run the server using mix phn.server and go to any of the posts you already\ncreated and there we see our comment form. If we try to create a comment, we receive\na message that the comment was created but we cannot see it. The reason here is that\nwhile we are creating and persisting our comment in the database, we have no way\nof displaying it on the screen and so we need to modify our views. To do this, we\nfirst need to modify the function that we use to get our post to also load the comment."),"\n",o.createElement("br"),"\n",o.createElement(t.img,{src:"/images/get_cnmt.png",alt:"Load comments"}),"\n",o.createElement("br"),"\n",o.createElement(t.p,null,"Once we are loading the comments like so, we can modify the post's show.htm.eex template\nto display all the comment below the post they are associated with."),"\n",o.createElement("br"),"\n",o.createElement(t.img,{src:"/images/last.png",alt:"Comment form"}),"\n",o.createElement("br"),"\n",o.createElement(t.p,null,"This finally loads all comments just below the post they are associated with plus\nany other comment created on the particular post, as we can see from the browser."),"\n",o.createElement(t.pre,null,o.createElement(t.code)))}var l=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,a.ah)(),e.components);return t?o.createElement(t,e,o.createElement(r,e)):r(e)},c=n(8678),i=n(3723),s=n(9357),m=n(7110);const h=e=>{let{data:t,children:n}=e;const a=(0,i.c)(t.mdx.frontmatter.hero_image);return o.createElement(c.Z,{pageTitle:t.mdx.frontmatter.title,class:"p-6"},o.createElement("p",null,"Posted: ",t.mdx.frontmatter.date),o.createElement(i.G,{image:a,className:m.B9}),o.createElement("p",{class:"text-right mr-20"}," Photo Credit: ",t.mdx.frontmatter.hero_image_credit_text),o.createElement("section",{class:"bg-slate-100 shadow-2xl p-8 font-serif leading-relaxed text-lg w-6/6 md:w-5/6 lg:w-5/6"},n,o.createElement("h3",{align:"right",class:"mr-4"}," Connect With Me"),o.createElement("p",{class:"flex justify-end mt-4"},o.createElement("span",{class:"px-4"},o.createElement("a",{href:"https://twitter.com/jrowah",target:"blank"},o.createElement("img",{src:"https://raw.githubusercontent.com/rahuldkjain/github-profile-readme-generator/master/src/images/icons/Social/twitter.svg",alt:"jrowah",height:"20",width:"30"}))),o.createElement("span",{class:"px-4"},o.createElement("a",{href:"https://instagram.com/jrowah",target:"blank"},o.createElement("img",{src:"https://raw.githubusercontent.com/rahuldkjain/github-profile-readme-generator/master/src/images/icons/Social/instagram.svg",alt:"jrowah",height:"20",width:"30"}))),o.createElement("span",{class:"px-4"},o.createElement("a",{href:"https://linkedin.com/in/james-rowa",target:"blank"},o.createElement("img",{src:"https://raw.githubusercontent.com/rahuldkjain/github-profile-readme-generator/master/src/images/icons/Social/linked-in-alt.svg",alt:"james rowa",height:"20",width:"30"}))),o.createElement("span",{class:"px-4"},o.createElement("a",{href:"https://github.com/rowah",target:"blank"},o.createElement("img",{src:"https://raw.githubusercontent.com/rahuldkjain/github-profile-readme-generator/master/src/images/icons/Social/github.svg",alt:"james rowa",height:"20",width:"30"}))))))},p=e=>{let{data:t}=e;return o.createElement(s.Z,{title:t.mdx.frontmatter.title})};function u(e){return o.createElement(h,e,o.createElement(l,e))}},8678:function(e,t,n){"use strict";var a=n(7294),o=n(1883),r=n(3710),l=n(1186),c=n.n(l);t.Z=e=>{let{pageTitle:t,children:n}=e;return a.createElement("div",{className:r.nC},a.createElement(c(),{url:"https://www.linkpicture.com/q/jr_1.png"}),a.createElement("nav",null,a.createElement("ul",{className:r.FV},a.createElement("li",{className:r.up},a.createElement(o.Link,{to:"/",className:r.cP,class:"text-3xl text-blue-500 border-b-2 border-blue-500"},"About")),a.createElement("li",{className:r.up},a.createElement(o.Link,{to:"/journey",className:r.cP,class:"text-3xl text-blue-500 border-b-2 border-blue-500"},"Journey")),a.createElement("li",{className:r.up},a.createElement(o.Link,{to:"/blog",className:r.cP,class:"text-3xl text-blue-500 border-b-2 border-blue-500"},"Blog")))),a.createElement("main",null,a.createElement("h1",{class:"text-black text-3xl"},t),n))}},1186:function(e,t,n){function a(e,t){return a=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},a(e,t)}var o=n(7294),r=n(5697),l=[];function c(e){var t=e.alertCount,n=e.alertFillColor,a=e.alertTextColor,o=e.callback,r=e.renderOverlay,l=e.url,c=e.canvasSize,i=document.createElement("img");i.crossOrigin="Anonymous",i.onload=function(){var e=document.createElement("canvas");e.width=c,e.height=c;var l=e.getContext("2d");l.clearRect(0,0,i.width,i.height),l.drawImage(i,0,0,e.width,e.height),t&&function(e,t){var n=t.fillColor,a=t.text,o=t.textColor,r=t.canvasSize,l=r/5;e.font="bold "+(r-2*l)+"px arial";var c=Math.min(e.measureText(a).width,r-l)+l,i=r-c,s=r/2-l,m=l+r/2,h=Math.min(c/2,m/2);e.beginPath(),e.moveTo(i+h,s),e.arcTo(i+c,s,i+c,s+m,h),e.arcTo(i+c,s+m,i,s+m,h),e.arcTo(i,s+m,i,s,h),e.arcTo(i,s,i+c,s,h),e.closePath(),e.fillStyle=n,e.fill(),e.fillStyle=o,e.textBaseline="bottom",e.textAlign="right",e.fillText(a,r-l/2,r,r-l)}(l,{fillColor:n,textColor:a,text:t,canvasSize:c}),r&&r(e,l),o(l.canvas.toDataURL())},i.src=l}var i=function(e){var t,n;function o(){for(var t,n=arguments.length,a=new Array(n),o=0;o<n;o++)a[o]=arguments[o];return(t=e.call.apply(e,[this].concat(a))||this).state={animationIndex:0,animationLoop:null,animationRunning:!1},t}n=e,(t=o).prototype=Object.create(n.prototype),t.prototype.constructor=t,a(t,n),o.getActiveInstance=function(){return o.mountedInstances[o.mountedInstances.length-1]},o.draw=function(){if("undefined"!=typeof document){var e,t=o.getActiveInstance();if(0===l.length){var n=document.getElementsByTagName("head")[0],a=document.createElement("link");a.type="image/x-icon",a.rel="icon";var r=document.createElement("link");r.rel="apple-touch-icon",l.push(a,r);for(var i=n.getElementsByTagName("link"),s=i.length;--s>=0;)/\bicon\b/i.test(i[s].getAttribute("rel"))&&!t.props.keepIconLink(i[s])&&n.removeChild(i[s]);l.forEach((function(e){return n.appendChild(e)}))}e=t.props.url instanceof Array?t.props.url[t.state.animationIndex]:t.props.url,t.props.alertCount||t.props.renderOverlay?c({alertCount:t.props.alertCount,alertFillColor:t.props.alertFillColor,alertTextColor:t.props.alertTextColor,callback:function(e){l.forEach((function(t){return t.href=e}))},renderOverlay:t.props.renderOverlay,url:e,canvasSize:t.props.iconSize}):l.forEach((function(t){return t.href=e}))}},o.update=function(){if("undefined"!=typeof document){var e=o.getActiveInstance(),t=e.props.url instanceof Array&&e.props.animated,n=null;if(clearInterval(e.state.animationLoop),t){var a=function(){var t=(e.state.animationIndex+1)%e.props.url.length;o.draw(),e.setState({animationIndex:t})};n=setInterval(a,e.props.animationDelay),a()}else o.draw();e.setState({animationLoop:n})}};var r=o.prototype;return r.componentDidMount=function(){o.mountedInstances.push(this),o.update()},r.componentWillUnmount=function(){var e=o.getActiveInstance();clearInterval(e.state.animationLoop)},r.componentDidUpdate=function(e){e.url===this.props.url&&e.animated===this.props.animated&&e.alertCount===this.props.alertCount&&e.alertFillColor===this.props.alertFillColor&&e.alertTextColor===this.props.alertTextColor&&e.renderOverlay===this.props.renderOverlay&&e.keepIconLink===this.props.keepIconLink&&e.iconSize===this.props.iconSize||o.update()},r.render=function(){return null},o}(o.Component);i.displayName="Favicon",i.mountedInstances=[],i.defaultProps={iconSize:16,alertCount:null,alertFillColor:"red",alertTextColor:"white",animated:!0,animationDelay:500,keepIconLink:function(){return!1},renderOverlay:null,url:null},i.propTypes={iconSize:r.number,alertCount:r.oneOfType([r.number,r.string]),alertFillColor:r.string,alertTextColor:r.string,animated:r.bool,animationDelay:r.number,keepIconLink:r.func,renderOverlay:r.func,url:r.oneOfType([r.arrayOf(r.string),r.string]).isRequired},e.exports=i},1151:function(e,t,n){"use strict";n.d(t,{ah:function(){return r}});var a=n(7294);const o=a.createContext({});function r(e){const t=a.useContext(o);return a.useMemo((()=>"function"==typeof e?e(t):{...t,...e}),[t,e])}}}]);
//# sourceMappingURL=component---src-pages-blog-mdx-frontmatter-slug-js-content-file-path-volumes-code-my-website-blog-elixir-fundermentals-post-index-mdx-aa3a9ed29ed02874bcc2.js.map